[
	{
		"name": "default color",
		"scope": [
			"text",
			"source"
		],
		"settings": {
			"foreground": "default"
		}
	},
	{
		"name": "data structures, types and identifiers, e.g. function names",
		"scope": [
			"entity.name"
		],
		"settings": {
			"foreground": "function"
		}
	},
	{
		"name": "function calls",
		"scope": [
			"meta.function-call",
			"meta.function-call entity.name.function", // standalone function call
			"support.function"

		],
		"settings": {
			"foreground": "call"
		}
	},
	{
		"name": "inherited class",
		"scope": [
			"entity.other.inherited-class"
		],
		"settings": {
			"foreground": "teal"
		}
	},
	{
		"name": "variables",
		"scope": [
			"variable"
		],
		"settings": {
			"foreground": "variable"
		}
	},
	{
		"name": "properties",
		"scope": [
			"support.type.property-name", // e.g. JSON key name
			"meta.object-literal.key" // e.g. key name of object literal
		],
		"settings": {
			"foreground": "property" // it's the same color as variable
		}
	},
	{
		"name": "reserved variables of languages: self, this, super, etc",
		"scope": [
			"variable.language"
		],
		"settings": {
			"foreground": "reserved"
		}
	},
	{
		"name": "built-in variables of runtime: window, document, prototype, etc",
		"scope": [
			"support.variable",
			"support.class"
		],
		"settings": {
			"foreground": "builtIn"
		}
	},
	{
		"name": "function parameter declaration",
		"scope": [
			"variable.parameter"
		],
		"settings": {
			"foreground": "parameter"
		}
	},
	{
		"name": "variable.function",
		"scope": [
			"variable.function" // never encountered this scope in real code
		],
		"settings": {
			"foreground": "red"
		}
	},
	{
		"name": "booleans, null, undefined, escape, symbols, etc",
		"scope": [
			"constant"
		],
		"settings": {
			"foreground": "purple"
		}
	},
	{
		"name": "numbers",
		"scope": [
			"constant.numeric"
		],
		"settings": {
			"foreground": "orange"
		}
	},
	{
		"name": "int, bool, char, func, function, class, def, static, inline, const, public, and private",
		"scope": [
			"storage"
		],
		"settings": {
			"foreground": "declaration"
		}
	},
	{
		"name": "legal but unsure / user constructs",
		"scope": [
			"support.type"
		],
		"settings": {
			"foreground": "default"
		}
	},
	{
		"name": "import / export",
		"scope": [
			"keyword.import",
			"keyword.export",
			"keyword.control.import",
			"keyword.control.export",
			"keyword.control.directive.include"
			// "meta.import",
			// "meta.export"
		],
		"settings": {
			"foreground": "module"
		}
	},
	{
		"name": "flow control",
		"scope": [
			"keyword.control"
		],
		"settings": {
			"foreground": "orange"
		}
	},
	{
		"name": "conditional flow control", // only a few languages are able to enjoy this awesome feature, too bad
		"scope": [
			"keyword.control.conditional",
			"keyword.control.trycatch",
			"keyword.control.loop",
			"switch-expression.expr keyword.control.switch"

		],
		"settings": {
			"foreground": "black"
		}
	},
	{
		"name": "operators",
		"scope": [
			"keyword.operator"
		],
		"settings": {
			"foreground": "orange"
		}
	},
	{
		"name": "other keyword", // examples: "px" in css
		"scope": [
			"keyword"
		],
		"settings": {
			"foreground": "yellow"
		}
	},
	{
		"name": "string",
		"scope": [
			"string"
		],
		"settings": {
			"foreground": "string"
		}
	},
	{
		"name": "Regular Expressions",
		"scope": "string.regexp",
		"settings": {
		  "foreground": "teal"
		}
	  },
	{
		"name": "comment",
		"scope": [
			"comment"
		],
		"settings": {
			"foreground": "silver"
		}
	},
	{
		"name": "invalid",
		"scope": [
			"invalid"
		],
		"settings": {
			"foreground": "red"
		}
	},
	{
		"name": "invalid.deprecated",
		"scope": [
			"invalid.deprecated"
		],
		"settings": {
			"foreground": "pink"
		}
	}
]
